parameters:
- name: buildConfiguration
  type: string
  default: Release
- name: projectsFilter
  type: string
- name: testProjectsFilter
  type: string
- name: runImplementationTests
  type: boolean
  default: false
- name: runUnitTests
  type: boolean
  default: false
- name: runIntegrationTests
  type: boolean
  default: false
- name: runSmokeTests
  type: boolean
  default: false
- name: publishArtifact
  type: boolean
  default: false

steps:
- task: DotNetCoreCli@2
  displayName: Restore
  inputs:
    command: restore
    projects: '${{ parameters.projectsFilter }}'
    feedsToUse: 'select'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: build
    projects: '${{ parameters.projectsFilter }}'
    arguments: '--configuration ${{ parameters.buildConfiguration }} --no-restore'

- ${{ if eq(parameters.runImplementationTests, true) }}:
  - task: DotNetCoreCLI@2
    displayName: 'Implementation Tests'
    inputs:
      command: 'test'
      projects: '${{ parameters.testProjectsFilter }}'
      arguments: '--logger trx --filter Category=Implementation --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover'
      publishTestResults: true

- ${{ if eq(parameters.runUnitTests, true) }}:
  - task: DotNetCoreCLI@2
    displayName: 'Unit Tests'
    inputs:
      command: 'test'
      projects: '${{ parameters.testProjectsFilter }}'
      arguments: '--logger trx --filter Category=Unit --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover'
      publishTestResults: true

- ${{ if eq(parameters.runIntegrationTests, true) }}:
  - task: DotNetCoreCLI@2
    displayName: 'Integration Tests'
    inputs:
      command: 'test'
      projects: '${{ parameters.testProjectsFilter }}'
      arguments: '--logger trx --filter Category=Integration --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover'
      publishTestResults: true

- ${{ if eq(parameters.runSmokeTests, true) }}:
  - task: DotNetCoreCLI@2
    displayName: 'Smoke Tests'
    inputs:
      command: 'test'
      projects: '${{ parameters.testProjectsFilter }}'
      arguments: '--logger trx --filter Category=Smoke --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover'
      publishTestResults: true
  
- ${{ if eq(parameters.publishArtifact, true) }}:
  - task: DotNetCoreCLI@2
    displayName: "Publish"
    inputs:
      command: 'publish'
      publishWebProjects: false
      projects: '${{ parameters.projectsFilter }}'
      arguments: '--configuration ${{ parameters.buildConfiguration }} --output $(Build.ArtifactStagingDirectory)'
      zipAfterPublish: true         
          
  - task: PublishBuildArtifacts@1
    displayName: "Upload Artifacts"
    inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'



